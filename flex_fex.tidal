-- Euclidian patterns
do
  d1
    $ sound "bd(5,8) cp!2"
      # pan (density 1.7 $ tri)
  d2
    $ euclid 10 16
    $ sound "hh:13 hh:115"
      # gain "0.3 1 1.1"

-- Nice random structure
do
  let semiRandomPattern = "[6, 6*3] 2*2 [3 6!3]? [12, 11, 1, 2] 7 [8 [44 6*3]] 8*2 1"
  let cycleShift = 11
  let sampleBank = "drum"
  d2
    $ every cycleShift (0.25 ~>)
    $ n semiRandomPattern
      # s sampleBank
      # pan "0 1 0.25"
      # crush "3.0 6.8 8.2"

do
  d3
    $ every 3 (0.25 ~>)
    $ sound "voodoo:1(12,16)"
      # gain "1.2 1.1 1.3"
      # decay (density 1.4 $ saw)

-- Silence is important
d5 silence
d2 silence
d8 silence
d9 silence

-- Succinct Riddims
do
  d5
    $ sound "[bleep*3!15 bleep:1]/8"


-- SuperCollider physical sampling
do
  d8
    $ jux (# accelerate "-0.1")
    $ s "[supermandolin*8 [superhat ~ supermandolin*2 supermandolin supermandolin supermandolin supermandolin*2 supergong]]"
      # midinote "[80!9 78]/8"
      # sustain "1 0.25 2 1"
      # decay (density 10 $ tri)
      # cutoff (range 2800 8200 $ slow 4 $ tri)
      # resonance "0.2"

  d9
    $ s "super808 supersnare*8"
      # n (irand 10)
      # voice (range 0.1 1.0 $ rand)
      # decay "[2 0.5]/4"
      # accelerate "-0.4"
      # sustain "1.5"
      # speed "[0.5 2]/4"


-- basic 4/4 pattern using superCollider sounds
do
  let bassDrum = s "bd*2 ~ [bd ~ bd]"
  let snareDrum randomAmount= s "[~ super808*4]" # n (irand randomAmount)
  let hiHats randomAmount = s "[supergong:*16]" # n (irand randomAmount)
  d1
    $ stack [
      bassDrum,
      snareDrum 5,
      hiHats 10
      ]
